# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'
module Structure
  extend T::Sig
  SERVERS = [
    'https://www.structure.ac/api/v1'
  ].freeze
  class Structure
    extend T::Sig

    attr_accessor :accounts, :companies, :people, :user

    attr_accessor :security, :sdk_version, :gen_version

    sig { params(security: Shared::Security,
                 server_url: String,
                 url_params: T::Hash[Symbol, String],
                 client: Faraday::Request).void }
    def initialize(security: nil,
                 server_url: nil,
                 url_params: nil,
                 client: nil
                 )
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
      @client = Faraday.new(request: {
                              params_encoder: Faraday::FlatParamsEncoder
                            }) do |f|
        f.request :multipart, {}
        # f.response :logger
      end

      


      @security = nil
      @server_url = SERVERS[0]
      @sdk_version = '0.0.1'
      @gen_version = '2.23.2'
      init_sdks
    end

    sig { params(server_url: String, params: T.nilable(T::Hash[Symbol, String])).void }
    def config_server_url(server_url, params)
      if params.nil?
        @server_url = server_url
      else
        @server_url = Utils.template_url(server_url, params)
      end
      init_sdks
    end

    sig { params(security: Shared::Security).void }
    def config_security(security)
      @security = security
    end

    sig { void }
    def init_sdks
      @accounts = Accounts.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @companies = Companies.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @people = People.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @user = User.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
    end
  end
end
