# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module Structure
  extend T::Sig
  class Companies
    extend T::Sig
    sig { params(sdk: Structure::SDK, client: Faraday::Connection, server_url: String, sdk_version: String, gen_version: String).void }
    def initialize(sdk, client, server_url, sdk_version, gen_version)
      @sdk = sdk
      @client = client
      @server_url = server_url
      @sdk_version = sdk_version
      @gen_version = gen_version
    end
sig { params(request: T.nilable(Operations::EnrichCompanyRequest)).returns(Utils::FieldAugmented) }
    def enrich(request)
    # enrich - Enrich a company profile
      base_url = @server_url
      url = Utils.generate_url(
        Operations::EnrichCompanyRequest,
        base_url,
        '/companies/{id}/enrich',
        request
      )

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::EnrichCompanyResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.body = r.env.response_body if Utils.match_content_type(content_type, '*/*')
      elsif [401, 403, 404, 422].include?(r.status)
      end
      res
    end
sig { params(request: T.nilable(Operations::ListEmployeesRequest)).returns(Utils::FieldAugmented) }
    def list_employees(request)
    # list_employees - List company employees
      base_url = @server_url
      url = Utils.generate_url(
        Operations::ListEmployeesRequest,
        base_url,
        '/companies/{id}/employees',
        request
      )
      query_params = Utils.get_query_params(Operations::ListEmployeesRequest, request)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListEmployeesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.body = r.env.response_body if Utils.match_content_type(content_type, '*/*')
      elsif [401, 403, 404].include?(r.status)
      end
      res
    end
sig { params(request: T.nilable(Operations::ListJobsRequest)).returns(Utils::FieldAugmented) }
    def list_jobs(request)
    # list_jobs - List company jobs
      base_url = @server_url
      url = Utils.generate_url(
        Operations::ListJobsRequest,
        base_url,
        '/companies/{id}/jobs',
        request
      )
      query_params = Utils.get_query_params(Operations::ListJobsRequest, request)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListJobsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.body = r.env.response_body if Utils.match_content_type(content_type, '*/*')
      elsif [401, 403, 404].include?(r.status)
      end
      res
    end
sig { params(request: T.nilable(Operations::SearchCompaniesApplicationJSON)).returns(Utils::FieldAugmented) }
    def search(request)
    # search - Search Companies
      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/companies/search"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type

      r = @client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::SearchCompaniesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.body = r.env.response_body if Utils.match_content_type(content_type, '*/*')
      elsif [401, 403].include?(r.status)
      end
      res
    end
  end
end
